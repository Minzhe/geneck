library(argparse)
parser <- ArgumentParser(description = "This pipline is to construct gene network using gene co-expression data and specified hub gene information.")
print(1,2,3)
print(c(1,2,3))
print(c(1,2,3), sep = "\n")
1:9
getwd()
expr.data <- read.csv(file = "public_html/geneck/data/demo_data.csv", header = TRUE, row.names = 1)
View(expr.data)
dim(expr.data)
expr_data <- read.table(file = "Epublic_html/geneck/data/demo_data.csv", header = T)
expr_data <- read.table(file = "public_html/geneck/data/demo_data.csv", header = T)
expr_data <- read.csv(file = "public_html/geneck/data/demo_data.csv", header = T)
View(expr_data)
dim(expr_data)
p <- ncol(expr.data)
n <- nrow(expr.data)
expr.mat <- scale(as.matrix(expr.data), center = TRUE, scale = FALSE)
pcor_est <- pcor.shrink(X)
suppressMessages(library(corpcor))
suppressMessages(library(GeneNet))
pcor_est <- pcor.shrink(X)
pcor_est <- pcor.shrink(expr.mat)
View(expr.mat)
pcor_est <- pcor.shrink(expr.mat)
expr.data <- read.csv("public_html/geneck/data/demo_data.csv", header = TRUE)
View(expr.data)
expr.data <- read.csv("public_html/geneck/data/demo_data.csv", header = TRUE, row.names = 1)
expr.data <- read.csv("public_html/geneck/data/demo_data.csv", header = TRUE, row.names = 1)
expr.data <- read.csv("public_html/geneck/data/demo_data.csv", header = TRUE)
View(expr.data)
p <- ncol(expr.data)
n <- nrow(expr.data)
expr.mat <- scale(as.matrix(expr.data), center = TRUE, scale = FALSE)
pcor_est <- pcor.shrink(expr.mat)
test_pcor <- network.test.edges(pcor_est)
test_pcor <- network.test.edges(pcor_est)
test_pcor <- network.test.edges(pcor_est)
test_pcor <- network.test.edges(pcor_est)
est_res <- test_pcor[test_pcor[, 6] >= (1-fdr), ]
fdr = 0.2
est_res <- test_pcor[test_pcor[, 6] >= (1-fdr), ]
View(est_res)
est_edge <- as.matrix(est_res[, c(2, 3)])
View(est_edge)
View(test_pcor)
network.GeneNet <- function(expr.data, fdr) {
if (fdr <= 0 | fdr >= 1) {
stop('Input error: false discovery rate for GeneNet should bewteen 0 and 1.')
}
p <- ncol(expr.data)
n <- nrow(expr.data)
expr.mat <- scale(as.matrix(expr.data), center = TRUE, scale = FALSE)
pcor_est <- pcor.shrink(expr.mat)
test_pcor <- network.test.edges(pcor_est)
est_res <- test_pcor[test_pcor[, 6] >= (1-fdr), ]
est_edge <- as.matrix(est_res[, c(2, 3)])
print(est_edge)
}
param = 0.2
est_edge <- network.GeneNet(expr.data = expr.data, fdr = param)
est_edge <- network.GeneNet(expr.data = expr.data, fdr = param)
View(est_edge)
est_edge$node1
est_edge[,1]
gene.index <- colnames(expr.data)
gene.index[expr.data[,1]]
gene.index[1]
gene.index[c(expr.data[,1])]
class(expr.data[,1])
gene.index[c(1,2,1)]
class(c(1,2,1))
gene.index[as.vector(expr.data[,1])]
traceback()
as.numeric(expr.data[,1])
as.numeric(est_edge[,1])
gene.index[est_edge[,1]]
gene.index[est_edge[,2]]
est_edge[,2]
View(est_edge)
est_edge[,1] <- gene.index[est_edge[,1]]
View(est_edge)
est_edge[,2] <- gene.index[est_edge[,2]]
View(est_edge)
est_edge <- as.matrix(est_res[, c(2, 3)])
View(est_edge)
class(est_edge)
est_edge <- est_res[, c(2, 3)]
View(est_edge)
est_edge[,1] <- gene.index[est_edge[,1]]
est_edge[,2] <- gene.index[est_edge[,2]]
View(est_edge)
View(est_edge)
View(est_edge)
library(rjson)
toJSON(est_edge)
View(est_edge)
View(est_edge)
alpha = 0.2
expr.data <- read.csv("public_html/geneck/data/demo_data.csv")
View(expr.data)
p <- ncol(expr.data)
n <- nrow(expr.data)
gene.index <- colnames(expr.data)
expr.mat <- scale(as.matrix(expr.data), center = TRUE, scale = FALSE)
est_res <- matrix(0, p, p)
suppressMessages(library(CDLasso))
for (k in 1:p) {
rsp <- expr.mat[, k]
prd <- t(expr.mat[, -k])
lam <- sqrt(sum(rsp ^ 2)) * qnorm(alpha / (2 * p ^ 2), lower.tail = F)
out <- l2.reg(prd, rsp, lambda = lam)
est_res[k, -k] <- out$estimate
}
est_edge <- which(abs(est_res) > 0 & abs(t(est_res)) > 0, arr.ind = TRUE)
View(est_edge)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
if (length(est_edge) == 2) est_edge <- matrix(est_edge, 1, 2)
length(est_edge
)
matrix(est_edge, 1, 2)
class(est_edge)
###                       ns.R                       ###
### ================================================ ###
# This R script is function to use neighborhood selection to constrcut gene network.
suppressMessages(library(CDLasso))
network.ns <- function(expr.data, alpha) {
if (alpha <= 0) {
stop('Input error: parameter alpha for ns should be larger than 1.')
}
p <- ncol(expr.data)
n <- nrow(expr.data)
gene.index <- colnames(expr.data)
expr.mat <- scale(as.matrix(expr.data), center = TRUE, scale = FALSE)
est_res <- matrix(0, p, p)
for (k in 1:p) {
rsp <- expr.mat[, k]
prd <- t(expr.mat[, -k])
lam <- sqrt(sum(rsp ^ 2)) * qnorm(alpha / (2 * p ^ 2), lower.tail = F)
out <- l2.reg(prd, rsp, lambda = lam)
est_res[k, -k] <- out$estimate
}
est_edge <- which(abs(est_res) > 0 & abs(t(est_res)) > 0, arr.ind = TRUE)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
if (length(est_edge) == 2) est_edge <- matrix(est_edge, 1, 2)
est_edge <- as.data.frame(est_edge)
est_edge[,1] <- gene.index[est_edge[,1]]
est_edge[,2] <- gene.index[est_edge[,2]]
return(est_edge)
}
p <- ncol(expr.data)
n <- nrow(expr.data)
gene.index <- colnames(expr.data)
expr.mat <- scale(as.matrix(expr.data), center = TRUE, scale = FALSE)
S <- t(expr.mat) %*% expr.mat / n
out <- glasso(S, rho = lam)
est_edge <- which(abs(out$wi) > 0, T)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
suppressMessages(library(glasso))
out <- glasso(S, rho = lam)
est_edge <- which(abs(out$wi) > 0, T)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
if (length(est_edge) == 2) est_edge <- matrix(est_edge, 1, 2)
View(est_edge)
out <- glasso(S, rho = lambda)
lambda = 0.6
out <- glasso(S, rho = lambda)
est_edge <- which(abs(out$wi) > 0, T)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
if (length(est_edge) == 2) est_edge <- matrix(est_edge, 1, 2)
View(est_edge)
est_edge <- as.data.frame(est_edge)
colnames(est_edge) <- c("node1", "node2")
est_edge[,1] <- gene.index[est_edge[,1]]
est_edge[,2] <- gene.index[est_edge[,2]]
View(est_edge)
network.glasso <- fucntion(expr.data, lambda) {
if (lambda <= 0) {
stop('Input error: parameter alpha for ns should be larger than 1.')
}
p <- ncol(expr.data)
n <- nrow(expr.data)
gene.index <- colnames(expr.data)
expr.mat <- scale(as.matrix(expr.data), center = TRUE, scale = FALSE)
S <- t(expr.mat) %*% expr.mat / n
out <- glasso(S, rho = lambda)
est_edge <- which(abs(out$wi) > 0, T)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
if (length(est_edge) == 2) est_edge <- matrix(est_edge, 1, 2)
est_edge <- as.data.frame(est_edge)
colnames(est_edge) <- c("node1", "node2")
est_edge[,1] <- gene.index[est_edge[,1]]
est_edge[,2] <- gene.index[est_edge[,2]]
return(est_edge)
}
network.glasso <- fucntion(expr.data, lambda) {
if (lambda <= 0) {
stop('Input error: parameter alpha for ns should be larger than 1.')
}
p <- ncol(expr.data)
n <- nrow(expr.data)
gene.index <- colnames(expr.data)
expr.mat <- scale(as.matrix(expr.data), center = TRUE, scale = FALSE)
S <- t(expr.mat) %*% expr.mat / n
out <- glasso(S, rho = lambda)
est_edge <- which(abs(out$wi) > 0, T)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
if (length(est_edge) == 2) est_edge <- matrix(est_edge, 1, 2)
est_edge <- as.data.frame(est_edge)
colnames(est_edge) <- c("node1", "node2")
est_edge[,1] <- gene.index[est_edge[,1]]
est_edge[,2] <- gene.index[est_edge[,2]]
return(est_edge)
}
network.glasso <- function(expr.data, lambda) {
if (lambda <= 0) {
stop('Input error: parameter alpha for ns should be larger than 1.')
}
p <- ncol(expr.data)
n <- nrow(expr.data)
gene.index <- colnames(expr.data)
expr.mat <- scale(as.matrix(expr.data), center = TRUE, scale = FALSE)
S <- t(expr.mat) %*% expr.mat / n
out <- glasso(S, rho = lambda)
est_edge <- which(abs(out$wi) > 0, T)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
if (length(est_edge) == 2) est_edge <- matrix(est_edge, 1, 2)
est_edge <- as.data.frame(est_edge)
colnames(est_edge) <- c("node1", "node2")
est_edge[,1] <- gene.index[est_edge[,1]]
est_edge[,2] <- gene.index[est_edge[,2]]
return(est_edge)
}
p <- ncol(expr.data)
n <- nrow(expr.data)
gene.index <- colnames(expr.data)
expr.mat <- scale(as.matrix(expr.data), center = TRUE, scale = FALSE)
out <- glasso_sf(expr.data, alpha)
source('lib/glasso_SF.R')
source('~/public_html/geneck/bin/lib/glasso_SF.R')
out <- glasso_sf(expr.data, alpha)
out <- glasso_sf(expr.mat, alpha)
est_edge <- which(abs(out$wi) > 0, T)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
if (length(est_edge) == 2) est_edge <- matrix(est_edge, 1, 2)
est_edge <- as.data.frame(est_edge)
colnames(est_edge) <- c("node1", "node2")
est_edge[,1] <- gene.index[est_edge[,1]]
est_edge[,2] <- gene.index[est_edge[,2]]
View(est_edge)
alpha = 0.3
out <- glasso_sf(expr.mat, alpha)
est_edge <- which(abs(out$wi) > 0, T)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
if (length(est_edge) == 2) est_edge <- matrix(est_edge, 1, 2)
est_edge <- as.data.frame(est_edge)
colnames(est_edge) <- c("node1", "node2")
est_edge[,1] <- gene.index[est_edge[,1]]
est_edge[,2] <- gene.index[est_edge[,2]]
View(est_edge)
View(est_edge)
expr.mat <- scale(as.matrix(expr.data), center = TRUE, scale = FALSE)
S <- t(expr.mat) %*% expr.mat / n
out <- glasso(S, rho = lambda)
est_edge <- which(abs(out$wi) > 0, T)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
if (length(est_edge) == 2) est_edge <- matrix(est_edge, 1, 2)
est_edge <- as.data.frame(est_edge)
colnames(est_edge) <- c("node1", "node2")
est_edge[,1] <- gene.index[est_edge[,1]]
est_edge[,2] <- gene.index[est_edge[,2]]
View(est_edge)
source("lib/PCA_CMI.R")
source('~/public_html/geneck/bin/lib/PCA_CMI.R')
out <- pca_cmi(t(X), lambda)
out <- pca_cmi(t(expr.mat), lambda)
lambda
lambda = 0.03
out <- pca_cmi(t(expr.mat), lambda)
est_edge <- which(out$G == 1, T)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
est_edge <- as.data.frame(est_edge)
colnames(est_edge) <- c("node1", "node2")
est_edge[,1] <- gene.index[est_edge[,1]]
est_edge[,2] <- gene.index[est_edge[,2]]
View(est_edge)
sys.frame(1)
library(envDocument)
library(envDocument)
getScriptPath()
sys.call()
sys.calls()
expr.data <- read.csv("public_html/geneck/data/demo_data.csv")
p <- ncol(expr.data)
n <- nrow(expr.data)
gene.index <- colnames(expr.data)
expr.mat <- scale(as.matrix(expr.data), center = TRUE, scale = FALSE)
out <- cmi2ni(t(expr.mat), lambda)
source('~/public_html/geneck/bin/lib/CMI2NI.R')
out <- cmi2ni(t(expr.mat), lambda)
lambda = 0.03
out <- cmi2ni(t(expr.mat), lambda)
est_edge <- which(out$G == 1, T)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
if (length(est_edge) == 2) est_edge <- matrix(est_edge, 1, 2)
est_edge <- as.data.frame(est_edge)
colnames(est_edge) <- c("node1", "node2")
est_edge[,1] <- gene.index[est_edge[,1]]
est_edge[,2] <- gene.index[est_edge[,2]]
View(est_edge)
suppressMessages(library(space))
out <- space.joint(expr.mat, lam1 = alpha * n, iter = 5)
alpha = 1
out <- space.joint(expr.mat, lam1 = alpha * n, iter = 5)
est_edge <- which(abs(out$ParCor) > 0, T)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
if (length(est_edge) == 2) est_edge <- matrix(est_edge, 1, 2)
View(est_edge)
bic_val = sum(log(n / out$sig.fit)) + log(n) / n * nrow(est_edge) * 2
View(est_edge)
hub_indx = c(52, 74, 107, 185, 188, 189, 190, 199)
paste("Gene", hub_indx)
paste("Gene", hub_indx, sep = "")
paste("Gene", hub_indx, sep = "", collapse = ",")
hub <- paste("Gene", hub_indx, sep = "", collapse = ",")
hub
is.null(aaa)
strsplit(hub, ",")
sapply(strsplit(hub, ","), "[[", 1)
strsplit(hub, ",")[[1]]
gene.index <- colnames(expr.data)
which(strsplit(hub, ",")[[1]] == gene.index)
hubgene <- strsplit(hub, ",")[[1]]
which(gene.index == hubgene)
detach(Matrix())
detach(Matrix
)
detach("Matrix")
hubgene == gene.index
hubgene[1] == gene.index
which(hubgene[1] == gene.index)
sapply(1:length(hubgene), FUN = function(x) which(hubgene[x] == gene.index))
gene.index <- colnames(expr.data)
hub.v <- strsplit(hub, ",")[[1]]
hub.index <- sapply(1:length(hub.v), FUN = function(x) which(hub.v[x] == gene.index))
alpha = 0.8
lambda = 0.6
S <- t(expr.mat) %*% expr.mat / n
lam_mat <- matrix(lambda, p, p)
lam_mat[hub.index, ] <- alpha * lambda
lam_mat[, hub.index] <- alpha * lambda
out <- glasso(S, rho = lam_mat)
suppressMessages(library(glasso))
out <- glasso(S, rho = lam_mat)
est_edge <- which(abs(out$wi) > 0, T)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
if (length(est_edge) == 2) est_edge <- matrix(est_edge, 1, 2)
est_edge <- as.data.frame(est_edge)
colnames(est_edge) <- c("node1", "node2")
est_edge[,1] <- gene.index[est_edge[,1]]
est_edge[,2] <- gene.index[est_edge[,2]]
View(est_edge)
View(est_edge)
library(devtool)
library(devtools)
install.packages("~/public_html/geneck/bin/espace_0.1.tar.gz", repos = NULL, type = "source")
library(space)
suppressMessages(library(espace))
alpha = 0.8
lambda = 1
niter_in = 5000
niter_out = 5
tol = 1e-6
out <- espace(X, hub.index, alpha = alpha, lambda = lambda * n, maxit_in = niter_in, maxit_out = niter_out, tol = tol)
out <- espace(expr.mat, hub.index, alpha = alpha, lambda = lambda * n, maxit_in = niter_in, maxit_out = niter_out, tol = tol)
est_edge <- which(abs(out$rho) > 0, T)
est_edge <- est_edge[est_edge[, 1] < est_edge[, 2], ]
if (length(est_edge) == 2) est_edge <- matrix(est_edge, 1, 2)
est_edge <- as.data.frame(est_edge)
colnames(est_edge) <- c("node1", "node2")
est_edge[,1] <- gene.index[est_edge[,1]]
est_edge[,2] <- gene.index[est_edge[,2]]
View(est_edge)
gic_val <- sum(log(apply(out$residual, 2, nrm))) + log(log(n)) * log(p) / n * nrow(est_edge) * 2
nrm <- function(x) return(sum(x ^ 2))
gic_val <- sum(log(apply(out$residual, 2, nrm))) + log(log(n)) * log(p) / n * nrow(est_edge) * 2
View(est_edge)
library(devtools)
install_github("DIGREsyn", "Minzhe")
install.packages("devtools")
library(devtools)
install.packages("httr")
install.packages("BayesianGLasso")
library(BayesianGLasso)
data(lung)
library(survival)
data("lung")
View(lung)
Surv(lung$time, lung$status)
setwd("~/public_html/geneck/data")
expr.dat <- read.csv("Results-EstEdge_csv.csv")
expr.dat <- read.csv("Results-EstEdge_csv")
View(expr.dat)
installed.packages("igraph")
installed.package("igraph")
install.package("igraph")
install.packages("igraph")
